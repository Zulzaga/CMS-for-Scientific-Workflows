# Note that infinity can be represented by float('inf') in Python.

################################################################################
# You do not need to implement anything in this section below.
import math
def dist(loc1, loc2):
    xdiff = loc1[0] - loc2[0]
    ydiff = loc1[1] - loc2[1]
    return math.sqrt(xdiff * xdiff + ydiff * ydiff)

import heapq
import itertools
# Borrowed heavily from https://docs.python.org/2/library/heapq.html#priority-queue-implementation-notes
class PriorityQueue:
    def __init__(self):
        self.heap = []
        self.entry_finder = {}
        self.REMOVED = '<removed>'
        self.counter = itertools.count()
        self.num_elements = 0
        self.num_actions = 0

    def add(self, item, priority):
        if item in self.entry_finder:
            self.remove(item)
        count = next(self.counter)
        entry = [priority, count, item]
        self.entry_finder[item] = entry
        heapq.heappush(self.heap, entry)
        self.num_actions += 1
        self.num_elements += 1

    def remove(self, item):
        entry = self.entry_finder.pop(item)
        entry[-1] = self.REMOVED
        self.num_elements -= 1

    def pop(self):
        self.num_actions += 1
        while self.heap:
            priority, count, item = heapq.heappop(self.heap)
            if item is not self.REMOVED:
                self.num_elements -= 1
                del self.entry_finder[item]
                return item, priority
        raise KeyError('Pop from an empty priority queue')

    def head(self):
        priority, count, item = self.heap[0]
        while item is self.REMOVED:
            heapq.heappop(self.heap)
            priority,count,item=self.heap[0]
        return item, priority

    def empty(self):
        return self.num_elements == 0

# You do not need to implement anything in this section above.
################################################################################

# TODO: Implement both parts (a) and (b) with this function. If target is None,
# then return a list of tuples as described in part (a). If target is not None,
# then return a path as a list of states as described in part (b).
def reconstructPath(parent, node):
    path=[]
    if node!=None:
        path=[node]
        #print "parent in pathconstruction: ", parent 
        #print "pathconstruction: ", node
        while parent[node]!=None:
           # print "pathconstruction: ", node

            node=parent[node]
            path.append(node)
            #print "path pathconstruction: ", path
        #print path
    return path[::-1]
def dijkstra(n, edges, source, target=None):
    queue=PriorityQueue()
    visited={source}
    parent={}
    cost_map={}
    
    #print "source cost: ", cost_map[source]
    vertex_parent_cost=[]
    for i in range(n):
        cost_map[i]="inf"
        parent[i]=None
    parent[source]=None
    cost_map[source]=0
    queue.add(source, 0)
    #print "source", source
    #print "empty queue bro: ",queue.empty()
    while not queue.empty():
        explore=queue.pop()[0]
        #print "explore", explore
        if target==explore:
            return reconstructPath(parent,explore), cost_map[explore]
        visited.add(explore)
        vertex_parent_cost.append((explore, cost_map[explore], parent[explore]))
        #print "Neighbors: ", edges[explore]
        #print "cost_map_explored: ",cost_map[explore]
        for node,weight in edges[explore]:
            #print "In LOOP"
            if not node in visited:
                if cost_map[node]>cost_map[explore]+weight:
                    cost_map[node]=cost_map[explore]+weight
                    parent[node]=explore
                    queue.add(node,cost_map[node])
                    #print "GOT HERE BRO"   
    return vertex_parent_cost

# TODO: Implement part (c).
def reverseEdges(n,edges):
    reverseEdge={}
    for i in range(n):
        for edge,weight in edges[i]:
            if edge in reverseEdge:
                reverseEdge[edge].append((i,weight))
            else:
                reverseEdge[edge]=[(i,weight)]
    return reverseEdge
def edge_relaxation(visited, queue, parent,cost_map,other_cost_map, edges, current,inqueue,other_visited,mu):
    edge=None
    for node, weight in edges[current]:
        if not node in visited and node not in other_visited:
            "inSide the check"
            if cost_map[node]>cost_map[current]+weight:

                cost_map[node]=cost_map[current]+weight
                parent[node]=current
                queue.add(node,cost_map[node])
                inqueue.add(node)
        elif node in other_visited:
            my_mu=mu
            mu=min(mu,other_cost_map[node]+cost_map[current]+weight)
            if my_mu>mu:
                edge=(current,node)
    return (edge, mu)
#def stop_condition_check(explore,queue,otherqueue,)
def bidirectional(n, edges, source, target):
    reverseEdge=reverseEdges(n,edges)
    #print "reverse: ",reverseEdge, "edges: ", edges
    bqueue=PriorityQueue()
    fqueue=PriorityQueue()
    best_meeting_edge=None
    bvisited=set()
    fvisited=set()
    bparent={}
    fparent={}
    bcost_map={}
    fcost_map={}
    binqueue={target}
    finqueue={source}
    for i in range(n):
        bcost_map[i]="inf"
        fcost_map[i]="inf"
        bparent[i]=None
        fparent[i]=None
    bcost_map[target]=0
    mu="inf"
    fcost_map[source]=0
    fqueue.add(source,0)
    bqueue.add(target,0)
    best_meeting_edge = 0
    while not bqueue.empty():
        bexplore=bqueue.pop()[0]
        binqueue.remove(bexplore)
        
        
        bvisited.add(bexplore)
       
        node=edge_relaxation(bvisited, bqueue, bparent,bcost_map,fcost_map, reverseEdge, bexplore,binqueue,fvisited,mu)
        edge= node[0]
        mu = node[1]
        if not edge==None:
            best_meeting_edge=edge 
        if len(finqueue)>0 and len(binqueue):
            ls=min([fcost_map[i] for i in finqueue])
            lt=min([bcost_map[i] for i in binqueue])
        if mu<=lt+ls:
            forward=reconstructPath(fparent,best_meeting_edge[1])
            back=reconstructPath(bparent, best_meeting_edge[0])[::-1]
            forward.extend(back)
            #print "path: ",forward
            return forward,mu

        fexplore=fqueue.pop()[0]
        finqueue.remove(fexplore)
        fvisited.add(fexplore)
        node=edge_relaxation(fvisited, fqueue, fparent,fcost_map,bcost_map, edges, fexplore,finqueue,bvisited,mu)
        edge= node[0]
        mu = node[1]
        if not edge==None:
            best_meeting_edge=edge 
        if len(finqueue)>0 and len(binqueue):
            ls=min([fcost_map[i] for i in finqueue])
            lt=min([bcost_map[i] for i in binqueue])
        if mu<=lt+ls:
            forward=reconstructPath(fparent,fexplore)
            back=reconstructPath(bparent, best_meeting_edge[1])[::-1]
            forward.extend(back)
            #print "path: ",forward
            return forward,mu

    return False
# TODO: Implement part (d).

def astar(locs, edges, source, target):
    queue=PriorityQueue()
    visited={source}
    parent={}
    cost_map={}
    graph_cost={}
    vertex_parent_cost=[]
    for i in range(len(locs)):
        cost_map[i]="inf"
        graph_cost[i]="inf"
        parent[i]=None
    graph_cost[source]=0
    parent[source]=None
    cost_map[source]=dist(locs[source], locs[target])
    queue.add(source, 0)
    while not queue.empty():
        explore=queue.pop()[0]
        #print explore
        if target==explore:
            print "atleast here"
            path=reconstructPath(parent,explore)
            #print path
            
            return path, cost_map[explore]
        visited.add(explore)
        for node in edges[explore]:
            if not node in visited:
                gcost=graph_cost[explore]+dist(locs[node],locs[explore])
                if node in queue.entry_finder:
                    if graph_cost[node]>gcost:
                        graph_cost[node]=gcost
                        cost_map[node]=gcost+dist(locs[target],locs[node])
                        parent[node]=explore
                        queue.add(node,cost_map[node])
                else:
                    graph_cost[node]=gcost
                    cost_map[node]=gcost+dist(locs[target],locs[node])
                    parent[node]=explore
                    queue.add(node,cost_map[node])
                    #print node, cost_map[node]
    return False

    



